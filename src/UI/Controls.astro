---
import Settings from "../icons/Settings.astro";
---

<section
  class="fixed left-1/2 bottom-5 transform -translate-x-1/2 flex gap-4 items-center justify-center bg-yellow px-7 py-3 rounded-full shadow-habitz max-w-4/6 m-auto"
>
  <button
    id="settings-btn"
    class="shadow-habitz rounded-[8px] p-1 cursor-pointer hover:bg-orange transition-colors duration-200"
    ><Settings /></button
  >
  <select
    id="language-select"
    class="w-36 rounded-[8px] p-1 bg-yellow text-black shadow-habitz focus:outline-0 cursor-pointer"
  >
    <option value="javascript">JavaScript</option>
    <option value="typescript">TypeScript</option>
    <option value="python">Python</option>
    <option value="html">HTML</option>
    <option value="css">CSS</option>
    <option value="json">JSON</option>
    <option value="xml">XML</option>
    <option value="sql">SQL</option>
    <option value="cpp">C++</option>
    <option value="java">Java</option>
    <option value="php">PHP</option>
    <option value="rust">Rust</option>
    <option value="go">Go</option>
  </select>
  <select
    id="theme-select"
    class="w-44 rounded-[8px] p-1 bg-yellow text-black shadow-habitz focus:outline-0 cursor-pointer"
  >
    <option value="dark">One Dark</option>
    <option value="light">Claro</option>
    <option value="github-light">GitHub Light</option>
    <option value="github-dark">GitHub Dark</option>
    <option value="vscode-dark">VS Code Dark</option>
    <option value="dracula">Dracula</option>
    <option value="monokai">Monokai</option>
    <option value="material-dark">Material Dark</option>
    <option value="material-light">Material Light</option>
    <option value="nord">Nord</option>
    <option value="solarized-dark">Solarized Dark</option>
    <option value="solarized-light">Solarized Light</option>
    <option value="tokyo-night">Tokyo Night</option>
    <option value="abyss">Abyss</option>
  </select>
  <div class="flex items-center gap-2">
    <label for="font-size-range" class="text-sm font-medium text-black"
      >Fuente:</label
    >
    <input
      type="range"
      id="font-size-range"
      min="12"
      max="24"
      value="16"
      class="w-20 h-2 bg-orange rounded-lg appearance-none cursor-pointer shadow-habitz"
    />
    <span
      id="font-size-display"
      class="text-sm font-medium text-black min-w-[35px]">16px</span
    >
  </div>
</section>

<style>
  button {
    &:active {
      box-shadow: 0 2px 0 #000;
      transform: translateY(2px);
    }
  }

  /* Estilos personalizados para el range input */
  input[type="range"] {
    -webkit-appearance: none;
    background: transparent;
  }

  input[type="range"]::-webkit-slider-track {
    background: #ff995f;
    height: 8px;
    border-radius: 4px;
    border: 2px solid #000;
  }

  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    height: 18px;
    width: 18px;
    border-radius: 50%;
    background: #ffbd2e;
    border: 2px solid #000;
    cursor: pointer;
    box-shadow: 0 2px 0 #000;
  }

  input[type="range"]::-webkit-slider-thumb:active {
    box-shadow: 0 1px 0 #000;
    transform: translateY(1px);
  }

  input[type="range"]::-moz-range-track {
    background: #ff995f;
    height: 8px;
    border-radius: 4px;
    border: 2px solid #000;
  }

  input[type="range"]::-moz-range-thumb {
    height: 18px;
    width: 18px;
    border-radius: 50%;
    background: #ffbd2e;
    border: 2px solid #000;
    cursor: pointer;
    box-shadow: 0 2px 0 #000;
  }
</style>

<script>
  // Use Astro's client:load directive for interactivity
  if (typeof window !== "undefined") {
    const languageSelect = document.getElementById(
      "language-select"
    ) as HTMLSelectElement;
    const themeSelect = document.getElementById(
      "theme-select"
    ) as HTMLSelectElement;
    const fontSizeRange = document.getElementById(
      "font-size-range"
    ) as HTMLInputElement;
    const fontSizeDisplay = document.getElementById(
      "font-size-display"
    ) as HTMLSpanElement;

    languageSelect?.addEventListener("change", (event) => {
      const target = event.target as HTMLSelectElement;
      const selectedLanguage = target.value;

      // Dispatch custom event to communicate with React components
      window.dispatchEvent(
        new CustomEvent("language-selected", {
          detail: { language: selectedLanguage },
        })
      );
    });

    themeSelect?.addEventListener("change", (event) => {
      const target = event.target as HTMLSelectElement;
      const selectedTheme = target.value;

      // Dispatch custom event to communicate with React components
      window.dispatchEvent(
        new CustomEvent("theme-selected", {
          detail: { theme: selectedTheme },
        })
      );
    });

    fontSizeRange?.addEventListener("input", (event) => {
      const target = event.target as HTMLInputElement;
      const fontSize = target.value;

      // Update display
      if (fontSizeDisplay) {
        fontSizeDisplay.textContent = `${fontSize}px`;
      }

      // Dispatch custom event to communicate with React components
      window.dispatchEvent(
        new CustomEvent("font-size-changed", {
          detail: { fontSize: parseInt(fontSize) },
        })
      );
    });
  }
</script>
